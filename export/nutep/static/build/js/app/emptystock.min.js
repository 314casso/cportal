(function () {
  'use strict';

  const utils = {		    
      reviver: (key, value) => {
          const dateFormat = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$/;
          if (typeof value === "string" && dateFormat.test(value)) {
              return new Date(value);
          }    
          return value;
      },
      checkJob: (job, app) => {					
          app.loading = true;			
          var xhr = new XMLHttpRequest();			
          if (!job) {									
              app.loading = false;
              return;
          }
          xhr.open('GET', '/api/jobstatus/' + job + '/');
          xhr.onload = () => {
              try {
                  var resp = JSON.parse(xhr.responseText);
              } catch (e) {
                  app.error = "Произошла ошибка обновления данных: " + e;
              }								
              if (resp.job == 'started') {					
                  setTimeout(utils.checkJob, 1000, job, app);
              } else {					
                  app.loading = false;					
                  if (resp.job == 'failed') {
                      app.error = "Произошла ошибка обновления данных";
                  } else {
                      app.jobSuccess();
                  }
              }
          };
          xhr.error = (e) => {
              app.loading = false;
              app.error = "Error " + e.target.status + " occurred while receiving the document.";
          };
          xhr.send();
      },
      pingData: (url, app) => {
          var xhr = new XMLHttpRequest();			
          app.loading = true;
          xhr.open('GET', url);
          xhr.onload = function () {
              var resp = JSON.parse(xhr.responseText);
              utils.checkJob(resp.job, app);
          };
          xhr.send();
      },
      
      shortdate: (date) => {
          if (date) {
              return moment(date).format('DD.MM.YY');
          }
      },
      date: (date) => {
          if (date) {
              return moment(date).format('DD.MM.YYYY');
          }
      },    
      moment: (date) => {
          if (date) {
              return moment(date).format('DD.MM.YYYY HH:mm');
          }
      },
      upper: (date) => {
          if (date) {
              return date.toUpperCase();
          }
      },
      number: (x) => {
          if (!x) {
              return null;
          }
          return parseFloat(x).toString().replace(/\B(?=(\d{3})+(?!\d))/g, String.fromCharCode(160));
      },
      sum: (items, prop) => {
          return items.reduce( function(a, b){
              return a + parseFloat(b[prop]);
          }, 0);
      }
    };

  var appTerminalExport = new Vue({
      el: '#app-terminal-export',
      data: {
          items: [],
          loading: false,
          error: '',
          search: '',
          currentItem: null,
          container: null,
          total_rows: 0,
      },
      delimiters: ["<%", "%>"],
      mounted() {			
          this.fetchData();
          this.pingData();
      },
      methods: {
          checkJob: function (job) {
              utils.checkJob(job, this);
          },
          jobSuccess: function () {
              this.fetchData();
          },
          pingData: function () {
              this.loading = true;
              utils.pingData('/api/pingemptystock/', this);
          },
          fetchData: function () {
              console.log("fetchData");
              var xhr = new XMLHttpRequest();            
              xhr.open('GET', '/api/emptystockevents/');
              xhr.onload = () => {
                  try {
                      var data = JSON.parse(xhr.responseText, utils.reviver);
                      this.items = data;	
                      if (data && data[0].terminalexports) {				                        
                          this.currentItem = data[0].terminalexports[0];
                      }					
                  } catch (e) {
                      this.error = "Произошла ошибка обновления данных: " + e;
                  }
              };
              xhr.send();
          },
          open: function (url) {
              window.location.href = url;
          },
          clearSearch: function () {
              this.search = "";
          },
          setCurrentItem: function (item) {
              this.currentItem = item;
          },
          setContainer: function (terminalexport) {
              if (!terminalexport.container) {
                  return false;
              }
              this.container = terminalexport.container;                        
              return true;
          },
          rows: function (item) {
              if (item) {
                  var rows = item.terminalexports;
                  var self = this;
                  var filtered = rows.filter(function (row) {
                      if (!self.search) {
                          return true;							
                      }												
                      return row.container.number.search(new RegExp(self.search, "i")) != -1 || row.container.line.search(new RegExp(self.search, "i")) != -1; 
                  });	
                  self.total_rows = filtered.length;
                  return filtered;		
              }				
          },
      },
      filters: {
          shortdate: (date) => {
              return utils.shortdate(date);
          },
          date: (date) => {
              return utils.date(date);
          },
          moment: (date) => {				
              return utils.moment(date);									
          },
          upper: (date) => {
              return utils.upper(date);					
          },
          number: (x) => {
              return utils.number(x);					
          },
      },
  });

}());
